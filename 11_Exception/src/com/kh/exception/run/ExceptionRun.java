package com.kh.exception.run;

import com.kh.exception.controller.A_UncheckedException;

public class ExceptionRun {

	public static void main(String[] args) {
		/*
		 * 에러(오류)의 종류
		 * -시스템 에러 : 컴퓨터의 오작동으로 인해 발생하는 에러
		 *  -소스코드로 해결불가(심각)
		 * -컴파일 에러 : 프로그램 실행 전 소스코드상의 문법적인 문제로 발생하는 에러
		 * 	-소스코드 수정으로 해결
		 * -논리 에러 : 소스코드 상의 문법적인 문제도 없고 실행했을때도 문제가 없지만 
		 * 			프로그램 의도상 맞지않는 에러(기획과 설계가 잘못되었을 경우 발생)
		 * -런타임 에러 : 프로그램 실행 중 발생하는 에러 소스코드 상의 문법적인 문제가 없어도 발생할 수 있음.
		 * 			 사용자가 잘못 입력하는 경우 또는 개발자가 예측 가능한 경우를 처리해놓지 않아서 발생할수있음.
		 * 
		 *  예외 : 시스템 에러를 제외한 나머지 컴파일,런타임,논리 에러와 같은 비교적 덜 심각한 에러들 
		 *  	특히나 런타임 에러를 주로 예외로 다룬다.
		 *  예외처리 : 예외들이 발생했을 경우에 대비해서 처리하는 방법을 정의해두는 것
		 *  
		 *  예외처리를 하는 이유 : 예외 발생시 프로그램이 비정상적으로 종료되는것을 막기 위해 **
		 *  
		 *  예외처리 방법 
		 *  1. try ~ catch 문
		 *  2. throws 를 이용해서 떠넘기기 -> 오류를 발생한 메소드를 호출한 부분으로 떠넘긴다.
		 * 
		 * */
		A_UncheckedException a = new A_UncheckedException();
//		a.method1();
//		a.method2();
		a.method3();
		

	}

}
